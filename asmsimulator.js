var app=angular.module("asmsimulator",[]);app.service("assembler",["opcodes",function(opcodes){return{go:function(input){for(var regex=/^[\t ]*(?:([.A-Za-z]\w*)[:])?(?:[\t ]*([A-Za-z]{2,4})(?:[\t ]+(\[(\w+((\+|-)\d+)?)\]|\".+?\"|\'.+?\'|[.A-Za-z0-9]\w*)(?:[\t ]*[,][\t ]*(\[(\w+((\+|-)\d+)?)\]|\".+?\"|\'.+?\'|[.A-Za-z0-9]\w*))?)?)?/,regexNum=/^[-+]?[0-9]+$/,regexLabel=/^[.A-Za-z]\w*$/,code=[],mapping={},labels={},normalizedLabels={},lines=input.split("\n"),parseNumber=function(input){if("0x"===input.slice(0,2))return parseInt(input.slice(2),16);if("0o"===input.slice(0,2))return parseInt(input.slice(2),8);if("b"===input.slice(input.length-1))return parseInt(input.slice(0,input.length-1),2);if("d"===input.slice(input.length-1))return parseInt(input.slice(0,input.length-1),10);if(regexNum.exec(input))return parseInt(input,10);throw"Invalid number format"},parseRegister=function(input){return input=input.toUpperCase(),"A"===input?0:"B"===input?1:"C"===input?2:"D"===input?3:"SP"===input?4:void 0},parseOffsetAddressing=function(input){input=input.toUpperCase();var m=0,base=0;if("A"===input[0])base=0;else if("B"===input[0])base=1;else if("C"===input[0])base=2;else if("D"===input[0])base=3;else{if("SP"!==input.slice(0,2))return;base=4}var offset_start=1;if(4===base&&(offset_start=2),"-"===input[offset_start])m=-1;else{if("+"!==input[offset_start])return;m=1}var offset=m*parseInt(input.slice(offset_start+1),10);if(offset<-16||offset>15)throw"Offset must be a value between -16 and 15";return offset<0&&(offset=32+offset),8*offset+base},parseRegOrNumber=function(input,typeReg,typeNumber){var register=parseRegister(input);if(void 0!==register)return{type:typeReg,value:register};var label=parseLabel(input);if(void 0!==label)return{type:typeNumber,value:label};if("regaddress"===typeReg&&void 0!==(register=parseOffsetAddressing(input)))return{type:typeReg,value:register};var value=parseNumber(input);if(isNaN(value))throw"Not a "+typeNumber+": "+value;if(value<0||value>255)throw typeNumber+" must have a value between 0 and 255";return{type:typeNumber,value:value}},parseLabel=function(input){return regexLabel.exec(input)?input:void 0},getValue=function(input){switch(input.slice(0,1)){case"[":var address=input.slice(1,input.length-1);return parseRegOrNumber(address,"regaddress","address");case'"':for(var text=input.slice(1,input.length-1),chars=[],i=0,l=text.length;i<l;i++)chars.push(text.charCodeAt(i));return{type:"numbers",value:chars};case"'":var character=input.slice(1,input.length-1);if(character.length>1)throw"Only one character is allowed. Use String instead";return{type:"number",value:character.charCodeAt(0)};default:return parseRegOrNumber(input,"register","number")}},checkNoExtraArg=function(instr,arg){if(void 0!==arg)throw instr+": too many arguments"},i=0,l=lines.length;i<l;i++)try{var match=regex.exec(lines[i]);if(void 0!==match[1]||void 0!==match[2]){if(void 0!==match[1]&&function(label){var upperLabel=label.toUpperCase();if(upperLabel in normalizedLabels)throw"Duplicate label: "+label;if("A"===upperLabel||"B"===upperLabel||"C"===upperLabel||"D"===upperLabel)throw"Label contains keyword: "+upperLabel;labels[label]=code.length}(match[1]),void 0!==match[2]){var p1,p2,opCode,instr=match[2].toUpperCase();switch("DB"!==instr&&(mapping[code.length]=i),instr){case"DB":if(p1=getValue(match[3]),"number"===p1.type)code.push(p1.value);else{if("numbers"!==p1.type)throw"DB does not support this operand";for(var j=0,k=p1.value.length;j<k;j++)code.push(p1.value[j])}break;case"HLT":checkNoExtraArg("HLT",match[3]),opCode=opcodes.NONE,code.push(opCode);break;case"MOV":if(p1=getValue(match[3]),p2=getValue(match[7]),"register"===p1.type&&"register"===p2.type)opCode=opcodes.MOV_REG_TO_REG;else if("register"===p1.type&&"address"===p2.type)opCode=opcodes.MOV_ADDRESS_TO_REG;else if("register"===p1.type&&"regaddress"===p2.type)opCode=opcodes.MOV_REGADDRESS_TO_REG;else if("address"===p1.type&&"register"===p2.type)opCode=opcodes.MOV_REG_TO_ADDRESS;else if("regaddress"===p1.type&&"register"===p2.type)opCode=opcodes.MOV_REG_TO_REGADDRESS;else if("register"===p1.type&&"number"===p2.type)opCode=opcodes.MOV_NUMBER_TO_REG;else if("address"===p1.type&&"number"===p2.type)opCode=opcodes.MOV_NUMBER_TO_ADDRESS;else{if("regaddress"!==p1.type||"number"!==p2.type)throw"MOV does not support this operands";opCode=opcodes.MOV_NUMBER_TO_REGADDRESS}code.push(opCode,p1.value,p2.value);break;case"ADD":if(p1=getValue(match[3]),p2=getValue(match[7]),"register"===p1.type&&"register"===p2.type)opCode=opcodes.ADD_REG_TO_REG;else if("register"===p1.type&&"regaddress"===p2.type)opCode=opcodes.ADD_REGADDRESS_TO_REG;else if("register"===p1.type&&"address"===p2.type)opCode=opcodes.ADD_ADDRESS_TO_REG;else{if("register"!==p1.type||"number"!==p2.type)throw"ADD does not support this operands";opCode=opcodes.ADD_NUMBER_TO_REG}code.push(opCode,p1.value,p2.value);break;case"SUB":if(p1=getValue(match[3]),p2=getValue(match[7]),"register"===p1.type&&"register"===p2.type)opCode=opcodes.SUB_REG_FROM_REG;else if("register"===p1.type&&"regaddress"===p2.type)opCode=opcodes.SUB_REGADDRESS_FROM_REG;else if("register"===p1.type&&"address"===p2.type)opCode=opcodes.SUB_ADDRESS_FROM_REG;else{if("register"!==p1.type||"number"!==p2.type)throw"SUB does not support this operands";opCode=opcodes.SUB_NUMBER_FROM_REG}code.push(opCode,p1.value,p2.value);break;case"INC":if(p1=getValue(match[3]),checkNoExtraArg("INC",match[7]),"register"!==p1.type)throw"INC does not support this operand";opCode=opcodes.INC_REG,code.push(opCode,p1.value);break;case"DEC":if(p1=getValue(match[3]),checkNoExtraArg("DEC",match[7]),"register"!==p1.type)throw"DEC does not support this operand";opCode=opcodes.DEC_REG,code.push(opCode,p1.value);break;case"CMP":if(p1=getValue(match[3]),p2=getValue(match[7]),"register"===p1.type&&"register"===p2.type)opCode=opcodes.CMP_REG_WITH_REG;else if("register"===p1.type&&"regaddress"===p2.type)opCode=opcodes.CMP_REGADDRESS_WITH_REG;else if("register"===p1.type&&"address"===p2.type)opCode=opcodes.CMP_ADDRESS_WITH_REG;else{if("register"!==p1.type||"number"!==p2.type)throw"CMP does not support this operands";opCode=opcodes.CMP_NUMBER_WITH_REG}code.push(opCode,p1.value,p2.value);break;case"JMP":if(p1=getValue(match[3]),checkNoExtraArg("JMP",match[7]),"register"===p1.type)opCode=opcodes.JMP_REGADDRESS;else{if("number"!==p1.type)throw"JMP does not support this operands";opCode=opcodes.JMP_ADDRESS}code.push(opCode,p1.value);break;case"JC":case"JB":case"JNAE":if(p1=getValue(match[3]),checkNoExtraArg(instr,match[7]),"register"===p1.type)opCode=opcodes.JC_REGADDRESS;else{if("number"!==p1.type)throw instr+" does not support this operand";opCode=opcodes.JC_ADDRESS}code.push(opCode,p1.value);break;case"JNC":case"JNB":case"JAE":if(p1=getValue(match[3]),checkNoExtraArg(instr,match[7]),"register"===p1.type)opCode=opcodes.JNC_REGADDRESS;else{if("number"!==p1.type)throw instr+"does not support this operand";opCode=opcodes.JNC_ADDRESS}code.push(opCode,p1.value);break;case"JZ":case"JE":if(p1=getValue(match[3]),checkNoExtraArg(instr,match[7]),"register"===p1.type)opCode=opcodes.JZ_REGADDRESS;else{if("number"!==p1.type)throw instr+" does not support this operand";opCode=opcodes.JZ_ADDRESS}code.push(opCode,p1.value);break;case"JNZ":case"JNE":if(p1=getValue(match[3]),checkNoExtraArg(instr,match[7]),"register"===p1.type)opCode=opcodes.JNZ_REGADDRESS;else{if("number"!==p1.type)throw instr+" does not support this operand";opCode=opcodes.JNZ_ADDRESS}code.push(opCode,p1.value);break;case"JA":case"JNBE":if(p1=getValue(match[3]),checkNoExtraArg(instr,match[7]),"register"===p1.type)opCode=opcodes.JA_REGADDRESS;else{if("number"!==p1.type)throw instr+" does not support this operand";opCode=opcodes.JA_ADDRESS}code.push(opCode,p1.value);break;case"JNA":case"JBE":if(p1=getValue(match[3]),checkNoExtraArg(instr,match[7]),"register"===p1.type)opCode=opcodes.JNA_REGADDRESS;else{if("number"!==p1.type)throw instr+" does not support this operand";opCode=opcodes.JNA_ADDRESS}code.push(opCode,p1.value);break;case"PUSH":if(p1=getValue(match[3]),checkNoExtraArg(instr,match[7]),"register"===p1.type)opCode=opcodes.PUSH_REG;else if("regaddress"===p1.type)opCode=opcodes.PUSH_REGADDRESS;else if("address"===p1.type)opCode=opcodes.PUSH_ADDRESS;else{if("number"!==p1.type)throw"PUSH does not support this operand";opCode=opcodes.PUSH_NUMBER}code.push(opCode,p1.value);break;case"POP":if(p1=getValue(match[3]),checkNoExtraArg(instr,match[7]),"register"!==p1.type)throw"PUSH does not support this operand";opCode=opcodes.POP_REG,code.push(opCode,p1.value);break;case"CALL":if(p1=getValue(match[3]),checkNoExtraArg(instr,match[7]),"register"===p1.type)opCode=opcodes.CALL_REGADDRESS;else{if("number"!==p1.type)throw"CALL does not support this operand";opCode=opcodes.CALL_ADDRESS}code.push(opCode,p1.value);break;case"RET":checkNoExtraArg(instr,match[3]),opCode=opcodes.RET,code.push(opCode);break;case"MUL":if(p1=getValue(match[3]),checkNoExtraArg(instr,match[7]),"register"===p1.type)opCode=opcodes.MUL_REG;else if("regaddress"===p1.type)opCode=opcodes.MUL_REGADDRESS;else if("address"===p1.type)opCode=opcodes.MUL_ADDRESS;else{if("number"!==p1.type)throw"MULL does not support this operand";opCode=opcodes.MUL_NUMBER}code.push(opCode,p1.value);break;case"DIV":if(p1=getValue(match[3]),checkNoExtraArg(instr,match[7]),"register"===p1.type)opCode=opcodes.DIV_REG;else if("regaddress"===p1.type)opCode=opcodes.DIV_REGADDRESS;else if("address"===p1.type)opCode=opcodes.DIV_ADDRESS;else{if("number"!==p1.type)throw"DIV does not support this operand";opCode=opcodes.DIV_NUMBER}code.push(opCode,p1.value);break;case"AND":if(p1=getValue(match[3]),p2=getValue(match[7]),"register"===p1.type&&"register"===p2.type)opCode=opcodes.AND_REG_WITH_REG;else if("register"===p1.type&&"regaddress"===p2.type)opCode=opcodes.AND_REGADDRESS_WITH_REG;else if("register"===p1.type&&"address"===p2.type)opCode=opcodes.AND_ADDRESS_WITH_REG;else{if("register"!==p1.type||"number"!==p2.type)throw"AND does not support this operands";opCode=opcodes.AND_NUMBER_WITH_REG}code.push(opCode,p1.value,p2.value);break;case"OR":if(p1=getValue(match[3]),p2=getValue(match[7]),"register"===p1.type&&"register"===p2.type)opCode=opcodes.OR_REG_WITH_REG;else if("register"===p1.type&&"regaddress"===p2.type)opCode=opcodes.OR_REGADDRESS_WITH_REG;else if("register"===p1.type&&"address"===p2.type)opCode=opcodes.OR_ADDRESS_WITH_REG;else{if("register"!==p1.type||"number"!==p2.type)throw"OR does not support this operands";opCode=opcodes.OR_NUMBER_WITH_REG}code.push(opCode,p1.value,p2.value);break;case"XOR":if(p1=getValue(match[3]),p2=getValue(match[7]),"register"===p1.type&&"register"===p2.type)opCode=opcodes.XOR_REG_WITH_REG;else if("register"===p1.type&&"regaddress"===p2.type)opCode=opcodes.XOR_REGADDRESS_WITH_REG;else if("register"===p1.type&&"address"===p2.type)opCode=opcodes.XOR_ADDRESS_WITH_REG;else{if("register"!==p1.type||"number"!==p2.type)throw"XOR does not support this operands";opCode=opcodes.XOR_NUMBER_WITH_REG}code.push(opCode,p1.value,p2.value);break;case"NOT":if(p1=getValue(match[3]),checkNoExtraArg(instr,match[7]),"register"!==p1.type)throw"NOT does not support this operand";opCode=opcodes.NOT_REG,code.push(opCode,p1.value);break;case"SHL":case"SAL":if(p1=getValue(match[3]),p2=getValue(match[7]),"register"===p1.type&&"register"===p2.type)opCode=opcodes.SHL_REG_WITH_REG;else if("register"===p1.type&&"regaddress"===p2.type)opCode=opcodes.SHL_REGADDRESS_WITH_REG;else if("register"===p1.type&&"address"===p2.type)opCode=opcodes.SHL_ADDRESS_WITH_REG;else{if("register"!==p1.type||"number"!==p2.type)throw instr+" does not support this operands";opCode=opcodes.SHL_NUMBER_WITH_REG}code.push(opCode,p1.value,p2.value);break;case"SHR":case"SAR":if(p1=getValue(match[3]),p2=getValue(match[7]),"register"===p1.type&&"register"===p2.type)opCode=opcodes.SHR_REG_WITH_REG;else if("register"===p1.type&&"regaddress"===p2.type)opCode=opcodes.SHR_REGADDRESS_WITH_REG;else if("register"===p1.type&&"address"===p2.type)opCode=opcodes.SHR_ADDRESS_WITH_REG;else{if("register"!==p1.type||"number"!==p2.type)throw instr+" does not support this operands";opCode=opcodes.SHR_NUMBER_WITH_REG}code.push(opCode,p1.value,p2.value);break;default:throw"Invalid instruction: "+match[2]}}}else{var line=lines[i].trim();if(""!==line&&";"!==line.slice(0,1))throw"Syntax error"}}catch(e){throw{error:e,line:i}}for(i=0,l=code.length;i<l;i++)if(!angular.isNumber(code[i])){if(!(code[i]in labels))throw{error:"Undefined label: "+code[i]};code[i]=labels[code[i]]}return{code:code,mapping:mapping,labels:labels}}}}]),app.service("cpu",["opcodes","memory",function(opcodes,memory){var cpu={step:function(){var self=this;if(!0===self.fault)throw"FAULT. Reset to continue.";try{var checkGPR=function(reg){if(reg<0||reg>=self.gpr.length)throw"Invalid register: "+reg;return reg},checkGPR_SP=function(reg){if(reg<0||reg>=1+self.gpr.length)throw"Invalid register: "+reg;return reg},setGPR_SP=function(reg,value){if(reg>=0&&reg<self.gpr.length)self.gpr[reg]=value;else{if(reg!=self.gpr.length)throw"Invalid register: "+reg;if(self.sp=value,self.sp<self.minSP)throw"Stack overflow";if(self.sp>self.maxSP)throw"Stack underflow"}},getGPR_SP=function(reg){if(reg>=0&&reg<self.gpr.length)return self.gpr[reg];if(reg==self.gpr.length)return self.sp;throw"Invalid register: "+reg},indirectRegisterAddress=function(value){var base,reg=value%8;base=reg<self.gpr.length?self.gpr[reg]:self.sp;var offset=Math.floor(value/8);return offset>15&&(offset-=32),base+offset},checkOperation=function(value){return self.zero=!1,self.carry=!1,value>=256?(self.carry=!0,value%=256):0===value?self.zero=!0:value<0&&(self.carry=!0,value=256- -value%256),value},jump=function(newIP){if(newIP<0||newIP>=memory.data.length)throw"IP outside memory";self.ip=newIP},push=function(value){if(memory.store(self.sp--,value),self.sp<self.minSP)throw"Stack overflow"},pop=function(){var value=memory.load(++self.sp);if(self.sp>self.maxSP)throw"Stack underflow";return value},division=function(divisor){if(0===divisor)throw"Division by 0";return Math.floor(self.gpr[0]/divisor)};if(self.ip<0||self.ip>=memory.data.length)throw"Instruction pointer is outside of memory";var regTo,regFrom,memFrom,memTo,number,instr=memory.load(self.ip);switch(instr){case opcodes.NONE:return!1;case opcodes.MOV_REG_TO_REG:regTo=checkGPR_SP(memory.load(++self.ip)),regFrom=checkGPR_SP(memory.load(++self.ip)),setGPR_SP(regTo,getGPR_SP(regFrom)),self.ip++;break;case opcodes.MOV_ADDRESS_TO_REG:regTo=checkGPR_SP(memory.load(++self.ip)),memFrom=memory.load(++self.ip),setGPR_SP(regTo,memory.load(memFrom)),self.ip++;break;case opcodes.MOV_REGADDRESS_TO_REG:regTo=checkGPR_SP(memory.load(++self.ip)),regFrom=memory.load(++self.ip),setGPR_SP(regTo,memory.load(indirectRegisterAddress(regFrom))),self.ip++;break;case opcodes.MOV_REG_TO_ADDRESS:memTo=memory.load(++self.ip),regFrom=checkGPR_SP(memory.load(++self.ip)),memory.store(memTo,getGPR_SP(regFrom)),self.ip++;break;case opcodes.MOV_REG_TO_REGADDRESS:regTo=memory.load(++self.ip),regFrom=checkGPR_SP(memory.load(++self.ip)),memory.store(indirectRegisterAddress(regTo),getGPR_SP(regFrom)),self.ip++;break;case opcodes.MOV_NUMBER_TO_REG:regTo=checkGPR_SP(memory.load(++self.ip)),number=memory.load(++self.ip),setGPR_SP(regTo,number),self.ip++;break;case opcodes.MOV_NUMBER_TO_ADDRESS:memTo=memory.load(++self.ip),number=memory.load(++self.ip),memory.store(memTo,number),self.ip++;break;case opcodes.MOV_NUMBER_TO_REGADDRESS:regTo=memory.load(++self.ip),number=memory.load(++self.ip),memory.store(indirectRegisterAddress(regTo),number),self.ip++;break;case opcodes.ADD_REG_TO_REG:regTo=checkGPR_SP(memory.load(++self.ip)),regFrom=checkGPR_SP(memory.load(++self.ip)),setGPR_SP(regTo,checkOperation(getGPR_SP(regTo)+getGPR_SP(regFrom))),self.ip++;break;case opcodes.ADD_REGADDRESS_TO_REG:regTo=checkGPR_SP(memory.load(++self.ip)),regFrom=memory.load(++self.ip),setGPR_SP(regTo,checkOperation(getGPR_SP(regTo)+memory.load(indirectRegisterAddress(regFrom)))),self.ip++;break;case opcodes.ADD_ADDRESS_TO_REG:regTo=checkGPR_SP(memory.load(++self.ip)),memFrom=memory.load(++self.ip),setGPR_SP(regTo,checkOperation(getGPR_SP(regTo)+memory.load(memFrom))),self.ip++;break;case opcodes.ADD_NUMBER_TO_REG:regTo=checkGPR_SP(memory.load(++self.ip)),number=memory.load(++self.ip),setGPR_SP(regTo,checkOperation(getGPR_SP(regTo)+number)),self.ip++;break;case opcodes.SUB_REG_FROM_REG:regTo=checkGPR_SP(memory.load(++self.ip)),regFrom=checkGPR_SP(memory.load(++self.ip)),setGPR_SP(regTo,checkOperation(getGPR_SP(regTo)-self.gpr[regFrom])),self.ip++;break;case opcodes.SUB_REGADDRESS_FROM_REG:regTo=checkGPR_SP(memory.load(++self.ip)),regFrom=memory.load(++self.ip),setGPR_SP(regTo,checkOperation(getGPR_SP(regTo)-memory.load(indirectRegisterAddress(regFrom)))),self.ip++;break;case opcodes.SUB_ADDRESS_FROM_REG:regTo=checkGPR_SP(memory.load(++self.ip)),memFrom=memory.load(++self.ip),setGPR_SP(regTo,checkOperation(getGPR_SP(regTo)-memory.load(memFrom))),self.ip++;break;case opcodes.SUB_NUMBER_FROM_REG:regTo=checkGPR_SP(memory.load(++self.ip)),number=memory.load(++self.ip),setGPR_SP(regTo,checkOperation(getGPR_SP(regTo)-number)),self.ip++;break;case opcodes.INC_REG:regTo=checkGPR_SP(memory.load(++self.ip)),setGPR_SP(regTo,checkOperation(getGPR_SP(regTo)+1)),self.ip++;break;case opcodes.DEC_REG:regTo=checkGPR_SP(memory.load(++self.ip)),setGPR_SP(regTo,checkOperation(getGPR_SP(regTo)-1)),self.ip++;break;case opcodes.CMP_REG_WITH_REG:regTo=checkGPR_SP(memory.load(++self.ip)),regFrom=checkGPR_SP(memory.load(++self.ip)),checkOperation(getGPR_SP(regTo)-getGPR_SP(regFrom)),self.ip++;break;case opcodes.CMP_REGADDRESS_WITH_REG:regTo=checkGPR_SP(memory.load(++self.ip)),regFrom=memory.load(++self.ip),checkOperation(getGPR_SP(regTo)-memory.load(indirectRegisterAddress(regFrom))),self.ip++;break;case opcodes.CMP_ADDRESS_WITH_REG:regTo=checkGPR_SP(memory.load(++self.ip)),memFrom=memory.load(++self.ip),checkOperation(getGPR_SP(regTo)-memory.load(memFrom)),self.ip++;break;case opcodes.CMP_NUMBER_WITH_REG:regTo=checkGPR_SP(memory.load(++self.ip)),number=memory.load(++self.ip),checkOperation(getGPR_SP(regTo)-number),self.ip++;break;case opcodes.JMP_REGADDRESS:regTo=checkGPR(memory.load(++self.ip)),jump(self.gpr[regTo]);break;case opcodes.JMP_ADDRESS:number=memory.load(++self.ip),jump(number);break;case opcodes.JC_REGADDRESS:regTo=checkGPR(memory.load(++self.ip)),self.carry?jump(self.gpr[regTo]):self.ip++;break;case opcodes.JC_ADDRESS:number=memory.load(++self.ip),self.carry?jump(number):self.ip++;break;case opcodes.JNC_REGADDRESS:regTo=checkGPR(memory.load(++self.ip)),self.carry?self.ip++:jump(self.gpr[regTo]);break;case opcodes.JNC_ADDRESS:number=memory.load(++self.ip),self.carry?self.ip++:jump(number);break;case opcodes.JZ_REGADDRESS:regTo=checkGPR(memory.load(++self.ip)),self.zero?jump(self.gpr[regTo]):self.ip++;break;case opcodes.JZ_ADDRESS:number=memory.load(++self.ip),self.zero?jump(number):self.ip++;break;case opcodes.JNZ_REGADDRESS:regTo=checkGPR(memory.load(++self.ip)),self.zero?self.ip++:jump(self.gpr[regTo]);break;case opcodes.JNZ_ADDRESS:number=memory.load(++self.ip),self.zero?self.ip++:jump(number);break;case opcodes.JA_REGADDRESS:regTo=checkGPR(memory.load(++self.ip)),self.zero||self.carry?self.ip++:jump(self.gpr[regTo]);break;case opcodes.JA_ADDRESS:number=memory.load(++self.ip),self.zero||self.carry?self.ip++:jump(number);break;case opcodes.JNA_REGADDRESS:regTo=checkGPR(memory.load(++self.ip)),self.zero||self.carry?jump(self.gpr[regTo]):self.ip++;break;case opcodes.JNA_ADDRESS:number=memory.load(++self.ip),self.zero||self.carry?jump(number):self.ip++;break;case opcodes.PUSH_REG:regFrom=checkGPR(memory.load(++self.ip)),push(self.gpr[regFrom]),self.ip++;break;case opcodes.PUSH_REGADDRESS:regFrom=memory.load(++self.ip),push(memory.load(indirectRegisterAddress(regFrom))),self.ip++;break;case opcodes.PUSH_ADDRESS:memFrom=memory.load(++self.ip),push(memory.load(memFrom)),self.ip++;break;case opcodes.PUSH_NUMBER:number=memory.load(++self.ip),push(number),self.ip++;break;case opcodes.POP_REG:regTo=checkGPR(memory.load(++self.ip)),self.gpr[regTo]=pop(),self.ip++;break;case opcodes.CALL_REGADDRESS:regTo=checkGPR(memory.load(++self.ip)),push(self.ip+1),jump(self.gpr[regTo]);break;case opcodes.CALL_ADDRESS:number=memory.load(++self.ip),push(self.ip+1),jump(number);break;case opcodes.RET:jump(pop());break;case opcodes.MUL_REG:regFrom=checkGPR(memory.load(++self.ip)),self.gpr[0]=checkOperation(self.gpr[0]*self.gpr[regFrom]),self.ip++;break;case opcodes.MUL_REGADDRESS:regFrom=memory.load(++self.ip),self.gpr[0]=checkOperation(self.gpr[0]*memory.load(indirectRegisterAddress(regFrom))),self.ip++;break;case opcodes.MUL_ADDRESS:memFrom=memory.load(++self.ip),self.gpr[0]=checkOperation(self.gpr[0]*memory.load(memFrom)),self.ip++;break;case opcodes.MUL_NUMBER:number=memory.load(++self.ip),self.gpr[0]=checkOperation(self.gpr[0]*number),self.ip++;break;case opcodes.DIV_REG:regFrom=checkGPR(memory.load(++self.ip)),self.gpr[0]=checkOperation(division(self.gpr[regFrom])),self.ip++;break;case opcodes.DIV_REGADDRESS:regFrom=memory.load(++self.ip),self.gpr[0]=checkOperation(division(memory.load(indirectRegisterAddress(regFrom)))),self.ip++;break;case opcodes.DIV_ADDRESS:memFrom=memory.load(++self.ip),self.gpr[0]=checkOperation(division(memory.load(memFrom))),self.ip++;break;case opcodes.DIV_NUMBER:number=memory.load(++self.ip),self.gpr[0]=checkOperation(division(number)),self.ip++;break;case opcodes.AND_REG_WITH_REG:regTo=checkGPR(memory.load(++self.ip)),regFrom=checkGPR(memory.load(++self.ip)),self.gpr[regTo]=checkOperation(self.gpr[regTo]&self.gpr[regFrom]),self.ip++;break;case opcodes.AND_REGADDRESS_WITH_REG:regTo=checkGPR(memory.load(++self.ip)),regFrom=memory.load(++self.ip),self.gpr[regTo]=checkOperation(self.gpr[regTo]&memory.load(indirectRegisterAddress(regFrom))),self.ip++;break;case opcodes.AND_ADDRESS_WITH_REG:regTo=checkGPR(memory.load(++self.ip)),memFrom=memory.load(++self.ip),self.gpr[regTo]=checkOperation(self.gpr[regTo]&memory.load(memFrom)),self.ip++;break;case opcodes.AND_NUMBER_WITH_REG:regTo=checkGPR(memory.load(++self.ip)),number=memory.load(++self.ip),self.gpr[regTo]=checkOperation(self.gpr[regTo]&number),self.ip++;break;case opcodes.OR_REG_WITH_REG:regTo=checkGPR(memory.load(++self.ip)),regFrom=checkGPR(memory.load(++self.ip)),self.gpr[regTo]=checkOperation(self.gpr[regTo]|self.gpr[regFrom]),self.ip++;break;case opcodes.OR_REGADDRESS_WITH_REG:regTo=checkGPR(memory.load(++self.ip)),regFrom=memory.load(++self.ip),self.gpr[regTo]=checkOperation(self.gpr[regTo]|memory.load(indirectRegisterAddress(regFrom))),self.ip++;break;case opcodes.OR_ADDRESS_WITH_REG:regTo=checkGPR(memory.load(++self.ip)),memFrom=memory.load(++self.ip),self.gpr[regTo]=checkOperation(self.gpr[regTo]|memory.load(memFrom)),self.ip++;break;case opcodes.OR_NUMBER_WITH_REG:regTo=checkGPR(memory.load(++self.ip)),number=memory.load(++self.ip),self.gpr[regTo]=checkOperation(self.gpr[regTo]|number),self.ip++;break;case opcodes.XOR_REG_WITH_REG:regTo=checkGPR(memory.load(++self.ip)),regFrom=checkGPR(memory.load(++self.ip)),self.gpr[regTo]=checkOperation(self.gpr[regTo]^self.gpr[regFrom]),self.ip++;break;case opcodes.XOR_REGADDRESS_WITH_REG:regTo=checkGPR(memory.load(++self.ip)),regFrom=memory.load(++self.ip),self.gpr[regTo]=checkOperation(self.gpr[regTo]^memory.load(indirectRegisterAddress(regFrom))),self.ip++;break;case opcodes.XOR_ADDRESS_WITH_REG:regTo=checkGPR(memory.load(++self.ip)),memFrom=memory.load(++self.ip),self.gpr[regTo]=checkOperation(self.gpr[regTo]^memory.load(memFrom)),self.ip++;break;case opcodes.XOR_NUMBER_WITH_REG:regTo=checkGPR(memory.load(++self.ip)),number=memory.load(++self.ip),self.gpr[regTo]=checkOperation(self.gpr[regTo]^number),self.ip++;break;case opcodes.NOT_REG:regTo=checkGPR(memory.load(++self.ip)),self.gpr[regTo]=checkOperation(~self.gpr[regTo]),self.ip++;break;case opcodes.SHL_REG_WITH_REG:regTo=checkGPR(memory.load(++self.ip)),regFrom=checkGPR(memory.load(++self.ip)),self.gpr[regTo]=checkOperation(self.gpr[regTo]<<self.gpr[regFrom]),self.ip++;break;case opcodes.SHL_REGADDRESS_WITH_REG:regTo=checkGPR(memory.load(++self.ip)),regFrom=memory.load(++self.ip),self.gpr[regTo]=checkOperation(self.gpr[regTo]<<memory.load(indirectRegisterAddress(regFrom))),self.ip++;break;case opcodes.SHL_ADDRESS_WITH_REG:regTo=checkGPR(memory.load(++self.ip)),memFrom=memory.load(++self.ip),self.gpr[regTo]=checkOperation(self.gpr[regTo]<<memory.load(memFrom)),self.ip++;break;case opcodes.SHL_NUMBER_WITH_REG:regTo=checkGPR(memory.load(++self.ip)),number=memory.load(++self.ip),self.gpr[regTo]=checkOperation(self.gpr[regTo]<<number),self.ip++;break;case opcodes.SHR_REG_WITH_REG:regTo=checkGPR(memory.load(++self.ip)),regFrom=checkGPR(memory.load(++self.ip)),self.gpr[regTo]=checkOperation(self.gpr[regTo]>>>self.gpr[regFrom]),self.ip++;break;case opcodes.SHR_REGADDRESS_WITH_REG:regTo=checkGPR(memory.load(++self.ip)),regFrom=memory.load(++self.ip),self.gpr[regTo]=checkOperation(self.gpr[regTo]>>>memory.load(indirectRegisterAddress(regFrom))),self.ip++;break;case opcodes.SHR_ADDRESS_WITH_REG:regTo=checkGPR(memory.load(++self.ip)),memFrom=memory.load(++self.ip),self.gpr[regTo]=checkOperation(self.gpr[regTo]>>>memory.load(memFrom)),self.ip++;break;case opcodes.SHR_NUMBER_WITH_REG:regTo=checkGPR(memory.load(++self.ip)),number=memory.load(++self.ip),self.gpr[regTo]=checkOperation(self.gpr[regTo]>>>number),self.ip++;break;default:throw"Invalid op code: "+instr}return!0}catch(e){throw self.fault=!0,e}},reset:function(){var self=this;self.maxSP=231,self.minSP=0,self.gpr=[0,0,0,0],self.sp=self.maxSP,self.ip=0,self.zero=!1,self.carry=!1,self.fault=!1}};return cpu.reset(),cpu}]),app.service("memory",[function(){var memory={data:Array(256),lastAccess:-1,load:function(address){var self=this;if(address<0||address>=self.data.length)throw"Memory access violation at "+address;return self.lastAccess=address,self.data[address]},store:function(address,value){var self=this;if(address<0||address>=self.data.length)throw"Memory access violation at "+address;self.lastAccess=address,self.data[address]=value},reset:function(){var self=this;self.lastAccess=-1;for(var i=0,l=self.data.length;i<l;i++)self.data[i]=0}};return memory.reset(),memory}]),app.service("opcodes",[function(){return{NONE:0,MOV_REG_TO_REG:1,MOV_ADDRESS_TO_REG:2,MOV_REGADDRESS_TO_REG:3,MOV_REG_TO_ADDRESS:4,MOV_REG_TO_REGADDRESS:5,MOV_NUMBER_TO_REG:6,MOV_NUMBER_TO_ADDRESS:7,MOV_NUMBER_TO_REGADDRESS:8,ADD_REG_TO_REG:10,ADD_REGADDRESS_TO_REG:11,ADD_ADDRESS_TO_REG:12,ADD_NUMBER_TO_REG:13,SUB_REG_FROM_REG:14,SUB_REGADDRESS_FROM_REG:15,SUB_ADDRESS_FROM_REG:16,SUB_NUMBER_FROM_REG:17,INC_REG:18,DEC_REG:19,CMP_REG_WITH_REG:20,CMP_REGADDRESS_WITH_REG:21,CMP_ADDRESS_WITH_REG:22,CMP_NUMBER_WITH_REG:23,JMP_REGADDRESS:30,JMP_ADDRESS:31,JC_REGADDRESS:32,JC_ADDRESS:33,JNC_REGADDRESS:34,JNC_ADDRESS:35,JZ_REGADDRESS:36,JZ_ADDRESS:37,JNZ_REGADDRESS:38,JNZ_ADDRESS:39,JA_REGADDRESS:40,JA_ADDRESS:41,JNA_REGADDRESS:42,JNA_ADDRESS:43,PUSH_REG:50,PUSH_REGADDRESS:51,PUSH_ADDRESS:52,PUSH_NUMBER:53,POP_REG:54,CALL_REGADDRESS:55,CALL_ADDRESS:56,RET:57,MUL_REG:60,MUL_REGADDRESS:61,MUL_ADDRESS:62,MUL_NUMBER:63,DIV_REG:64,DIV_REGADDRESS:65,DIV_ADDRESS:66,DIV_NUMBER:67,AND_REG_WITH_REG:70,AND_REGADDRESS_WITH_REG:71,AND_ADDRESS_WITH_REG:72,AND_NUMBER_WITH_REG:73,OR_REG_WITH_REG:74,OR_REGADDRESS_WITH_REG:75,OR_ADDRESS_WITH_REG:76,OR_NUMBER_WITH_REG:77,XOR_REG_WITH_REG:78,XOR_REGADDRESS_WITH_REG:79,XOR_ADDRESS_WITH_REG:80,XOR_NUMBER_WITH_REG:81,NOT_REG:82,SHL_REG_WITH_REG:90,SHL_REGADDRESS_WITH_REG:91,SHL_ADDRESS_WITH_REG:92,SHL_NUMBER_WITH_REG:93,SHR_REG_WITH_REG:94,SHR_REGADDRESS_WITH_REG:95,SHR_ADDRESS_WITH_REG:96,SHR_NUMBER_WITH_REG:97}}]),app.controller("Ctrl",["$document","$scope","$timeout","cpu","memory","assembler",function($document,$scope,$timeout,cpu,memory,assembler){$scope.memory=memory,$scope.cpu=cpu,$scope.error="",$scope.isRunning=!1,$scope.displayHex=!0,$scope.displayInstr=!0,$scope.displayA=!1,$scope.displayB=!1,$scope.displayC=!1,$scope.displayD=!1,$scope.speeds=[{speed:1,desc:"1 Hz"},{speed:4,desc:"4 Hz"},{speed:8,desc:"8 Hz"},{speed:16,desc:"16 Hz"}],$scope.speed=4,$scope.outputStartIndex=232,$scope.code='; Simple example\n; Writes Hello World to the output\n\n\tJMP start\nhello:\tDB "Hello World!"\t; Variable\n\tDB 0\t\t\t; String terminator\n\nstart:\n\tMOV C, hello\t\t; Point to var\n\tMOV D, 232\t\t; Point to output\n\tCALL print\n\tHLT\t\t\t; Stop execution\n\nprint:\t\t\t\t; print(C:*from, D:*to)\n\tPUSH A\n\tPUSH B\n\tMOV B, 0\n\n.loop:\n\tMOV A, [C]\t\t; Get char from var\n\tMOV [D], A\t\t; Write to output\n\tINC C\n\tINC D\n\tCMP B, [C]\t\t; Check if end\n\tJNZ .loop\t\t; jump if not\n\n\tPOP B\n\tPOP A\n\tRET',$scope.reset=function(){cpu.reset(),memory.reset(),$scope.error="",$scope.selectedLine=-1},$scope.executeStep=function(){$scope.checkPrgrmLoaded()||$scope.assemble();try{var res=cpu.step();return cpu.ip in $scope.mapping&&($scope.selectedLine=$scope.mapping[cpu.ip]),res}catch(e){return $scope.error=e,!1}};var runner;$scope.run=function(){$scope.checkPrgrmLoaded()||$scope.assemble(),$scope.isRunning=!0,runner=$timeout(function(){!0===$scope.executeStep()?$scope.run():$scope.isRunning=!1},1e3/$scope.speed)},$scope.stop=function(){$timeout.cancel(runner),$scope.isRunning=!1},$scope.checkPrgrmLoaded=function(){for(var i=0,l=memory.data.length;i<l;i++)if(0!==memory.data[i])return!0;return!1},$scope.getChar=function(value){var text=String.fromCharCode(value);return""===text.trim()?"  ":text},$scope.assemble=function(){try{$scope.reset();var assembly=assembler.go($scope.code);$scope.mapping=assembly.mapping;var binary=assembly.code;if($scope.labels=assembly.labels,binary.length>memory.data.length)throw"Binary code does not fit into the memory. Max "+memory.data.length+" bytes are allowed";for(var i=0,l=binary.length;i<l;i++)memory.data[i]=binary[i]}catch(e){void 0!==e.line?($scope.error=e.line+" | "+e.error,$scope.selectedLine=e.line):$scope.error=e.error}},$scope.jumpToLine=function(index){$document[0].getElementById("sourceCode").scrollIntoView(),$scope.selectedLine=$scope.mapping[index]},$scope.isInstruction=function(index){return void 0!==$scope.mapping&&void 0!==$scope.mapping[index]&&$scope.displayInstr},$scope.getMemoryCellCss=function(index){return index>=$scope.outputStartIndex?"output-bg":$scope.isInstruction(index)?"instr-bg":index>cpu.sp&&index<=cpu.maxSP?"stack-bg":""},$scope.getMemoryInnerCellCss=function(index){return index===cpu.ip?"marker marker-ip":index===cpu.sp?"marker marker-sp":index===cpu.gpr[0]&&$scope.displayA?"marker marker-a":index===cpu.gpr[1]&&$scope.displayB?"marker marker-b":index===cpu.gpr[2]&&$scope.displayC?"marker marker-c":index===cpu.gpr[3]&&$scope.displayD?"marker marker-d":""}}]),app.filter("flag",function(){return function(input){return input.toString().toUpperCase()}}),app.filter("number",function(){return function(input,isHex){if(isHex){var hex=input.toString(16).toUpperCase();return 1==hex.length?"0"+hex:hex}return input.toString(10)}}),app.directive("selectLine",[function(){return{restrict:"A",link:function(scope,element,attrs,controller){scope.$watch("selectedLine",function(){if(scope.selectedLine>=0){for(var lines=element[0].value.split("\n"),startPos=0,x=0;x<lines.length&&x!=scope.selectedLine;x++)startPos+=lines[x].length+1;var endPos=lines[scope.selectedLine].length+startPos;if(void 0!==element[0].selectionStart&&(element[0].focus(),element[0].selectionStart=startPos,element[0].selectionEnd=endPos),document.selection&&document.selection.createRange){element[0].focus(),element[0].select();var range=document.selection.createRange();range.collapse(!0),range.moveEnd("character",endPos),range.moveStart("character",startPos),range.select()}}})}}}]),app.filter("startFrom",function(){return function(input,start){return start=+start,input.slice(start)}}),app.directive("tabSupport",[function(){return{restrict:"A",
link:function(scope,element,attrs,controller){element.bind("keydown",function(e){if(9===e.keyCode){var val=this.value,start=this.selectionStart,end=this.selectionEnd;return this.value=val.substring(0,start)+"\t"+val.substring(end),this.selectionStart=this.selectionEnd=start+1,e.preventDefault(),!1}})}}}]);